Topic : Bit Manipulation 
📅 *Schedule for day42:*

❓ Q1: https://leetcode.com/problems/single-number/
// Approach :- iterating through the loop taking xor of each element  using property  a^a = 0  and a^0 = a.
    class Solution {
    public:
        int singleNumber(vector<int>& nums) {
            int result = 0;
            for(int i = 0 ; i<nums.size(); i++){
                result ^= nums[i];
            }
       return result;
        }
    };


❓ Q2: https://leetcode.com/problems/minimum-bit-flips-to-convert-number/

// Approach :- Counting number of different bits for flipping with start&1 then shifting towards right
class Solution {
public:
    int minBitFlips(int start, int goal) {
        //Use the bitwise AND operation (& 1) to isolate the least significant bit of each number.
       int cnt = 0 ; 
       while(start>0 || goal >0 ){
        if((start&1) != (goal & 1 )){  // checking is bits are same or not
            cnt++;
        }
        start >>= 1; // right shift by 1
        goal >>= 1;
       } 
       return cnt;
    }
};
